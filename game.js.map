{"version":3,"file":"game.js","sources":["node_modules/auto-reload-brunch/vendor/auto-reload.js","src/game.coffee"],"names":[],"mappings":"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","sourcesContent":["(function() {\n  var WebSocket = window.WebSocket || window.MozWebSocket;\n  var br = window.brunch = (window.brunch || {});\n  var ar = br['auto-reload'] = (br['auto-reload'] || {});\n  if (!WebSocket || ar.disabled) return;\n\n  var cacheBuster = function(url){\n    var date = Math.round(Date.now() / 1000).toString();\n    url = url.replace(/(\\&|\\\\?)cacheBuster=\\d*/, '');\n    return url + (url.indexOf('?') >= 0 ? '&' : '?') +'cacheBuster=' + date;\n  };\n\n  var browser = navigator.userAgent.toLowerCase();\n  var forceRepaint = ar.forceRepaint || browser.indexOf('chrome') > -1;\n\n  var reloaders = {\n    page: function(){\n      window.location.reload(true);\n    },\n\n    stylesheet: function(){\n      [].slice\n        .call(document.querySelectorAll('link[rel=\"stylesheet\"][href]:not([data-autoreload=\"false\"]'))\n        .forEach(function(link) {\n          link.href = cacheBuster(link.href);\n        });\n\n      // Hack to force page repaint after 25ms.\n      if (forceRepaint) setTimeout(function() { document.body.offsetHeight; }, 25);\n    }\n  };\n  var port = ar.port || 9485;\n  var host = br.server || window.location.hostname || 'localhost';\n\n  var connect = function(){\n    var connection = new WebSocket('ws://' + host + ':' + port);\n    connection.onmessage = function(event){\n      if (ar.disabled) return;\n      var message = event.data;\n      var reloader = reloaders[message] || reloaders.page;\n      reloader();\n    };\n    connection.onerror = function(){\n      if (connection.readyState) connection.close();\n    };\n    connection.onclose = function(){\n      window.setTimeout(connect, 1000);\n    };\n  };\n  connect();\n})();\n","module.exports = ->\n\n  quoteApiUrl = \"https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20html%20where%20url%3D'http%3A%2F%2Fwww.iheartquotes.com%2Fapi%2Fv1%2Frandom%3Fmax_characters%3D75%26format%3Djson'&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys\"\n\n  decodeKeyStates =\n    HIDDEN: 0\n    REVEALED: 1\n    SOLVED: 2\n\n  secretMessage = undefined\n  comboGroups = undefined\n  decodeKey = undefined\n  comboStream = undefined\n  score = undefined\n  moves = undefined\n\n  render = undefined\n\n  isLetter = (char) ->\n    /[a-z]/i.test char\n  isLetterOrSpace = (char) ->\n    /[a-z\\s]/i.test char\n  isSpace = (char) ->\n    /[\\s]/i.test char\n\n  hideLetters = (char) ->\n    if not isLetter char\n      decodeKeyStates.SOLVED\n    else\n      decodeKeyStates.HIDDEN\n\n  decodeChar = (secretChar, decodingStatus)  ->\n    if shouldReveal decodingStatus\n      return secretChar\n    else\n      return \"_\"\n\n  # encodedMessage, decodeKey -> decodedMessage\n  decode = R.compose(R.join(''), R.zipWith(decodeChar))\n\n  sentanceToWords = (sentance) ->\n    breakIntoWords = (acc, char, index) ->\n      if isLetterOrSpace char\n        if isSpace char\n          acc.push []\n        else\n          charInfo =\n            char: char\n            index: index\n            reveal: false\n          acc[acc.length - 1].push charInfo\n      acc\n    R.reduceIndexed breakIntoWords, [[]], sentance\n\n\n  shouldReveal = (decodingStatus) ->\n    decodingStatus in [decodeKeyStates.REVEALED, decodeKeyStates.SOLVED]\n\n  comboToString = R.compose R.join(\"\"), R.map(R.prop \"char\")\n\n  setIndexIfNotSolved = (value, arr, index) ->\n    if arr[index] isnt decodeKeyStates.SOLVED\n      arr[index] = value\n    arr\n\n  setIndexes = R.curry (value, arr, indexes) ->\n    R.reduce R.partial(setIndexIfNotSolved, value), arr, indexes\n\n\n  setIndexesToSolved = setIndexes decodeKeyStates.SOLVED\n  setIndexesToRevealed = setIndexes decodeKeyStates.REVEALED\n\n  resetAllUnsolved = (decodeKey) ->\n    nullifyAllNonSolved = (i) ->\n      if i is decodeKeyStates.SOLVED then i else decodeKeyStates.HIDDEN\n    R.map nullifyAllNonSolved, decodeKey\n\n  updatedecodeKey = (comboString, decodeKey, comboGroup) ->\n    pattern = new RegExp \"^\" + comboString, \"i\"\n    comboGroupString = comboToString comboGroup\n\n    if pattern.test comboGroupString\n      indexes = R.map(R.prop \"index\") R.take comboString.length, comboGroup\n      if comboString.length is comboGroup.length\n        return setIndexesToSolved decodeKey, indexes\n      else\n        return setIndexesToRevealed decodeKey, indexes\n    else\n      return decodeKey\n\n\n  getAllMatches = (comboGroups, comboStream, decodeKey) ->\n    if comboStream.length < 1\n      return decodeKey\n    comboString = comboToString comboStream\n    decodeKey = R.reduce R.partial(updatedecodeKey, comboString), decodeKey, comboGroups\n    return getAllMatches comboGroups, comboStream.slice(1), decodeKey\n\n\n  getValidComboStream = (comboStream, comboGroups) ->\n    if comboStream.length < 1\n      # no valid combo\n      return []\n\n    comboString = comboToString comboStream\n    pattern = new RegExp \"^\" + comboString, \"i\"\n    joinAndMatch = R.compose(R.match(pattern), comboToString)\n    isValidCombo = R.any joinAndMatch, comboGroups\n\n    if isValidCombo\n      return comboStream\n    else\n      # recurse with shorter and shorter combo streams\n      getValidComboStream comboStream.slice(1), comboGroups\n\n\n\n\n\n\n\n\n  # MAIN LOOP\n  frame = (seed, trigger, eventData) ->\n    newScope = seed.state.process eventData, seed.scope, trigger\n    newState = seed.state.nextState trigger, newScope\n    newState.render newScope\n    {state: newState, scope: newScope}\n\n  # TODO use FRP lib to fold over events to make frame a pure function\n  # frameEventsStream.fold initialSeed, frame\n  # for now we have a facilitator that stores the state in the closure\n  currentState = states.start\n  updateFrame = (type, data) ->\n    {state, scope} = frame {state: currentState, scope: store}, type, data\n    currentState = state\n    store = scope\n\n\n  # GAME STATES\n  states =\n    start:\n      process: (eventData, scope, trigger) ->\n        fetchQuote()\n        scope\n\n      nextState: (trigger, scope) ->\n        states.loading\n\n      render: (scope) ->\n        console.log \"Game started\"\n\n\n    loading:\n      process: (eventData, scope, trigger) ->\n        if trigger isnt \"quoteLoaded\" then return scope\n\n        secretMessage = eventData\n        scope.secretMessage = secretMessage\n        scope\n\n      nextState: (trigger, scope) ->\n        if trigger is \"quoteLoaded\"\n          states.readyToPlay\n        else\n          states.loading\n\n      render: (scope) ->\n        render {\n          secretMessage: \"\"\n          feedback: \"LOADING\"\n          score: \"\"\n          showGameActions: false\n        }\n\n    readyToPlay:\n      process: (eventData, scope) ->\n        # initialize game data with secret message\n        scope.comboGroups = sentanceToWords scope.secretMessage\n        scope.decodeKey = R.map hideLetters, scope.secretMessage\n        scope.comboStream = []\n        scope.score = R.filter(isLetter, scope.secretMessage).length * 5\n        scope.moves = 0\n        scope\n\n      nextState: (trigger, scope) ->\n        states.updateProgress\n\n      render: (scope) ->\n        render {\n          secretMessage: decode(secretMessage, decodeKey)\n          feedback: \"Type letter combos to reveal the hidden message.\"\n          score: scope.score\n          showGameActions: true\n        }\n\n    updateProgress:\n      process: (eventData, scope) ->\n        char = String.fromCharCode(eventData.keyCode).toLowerCase()\n        # ignore non-letter inputs\n        if isLetter char\n          potentialCombo = R.concat scope.comboStream, [{char:char}]\n          existingSolved = resetAllUnsolved scope.decodeKey\n          # update state\n          scope.moves += 1\n          scope.score = Math.max(0, scope.score - 1)\n          scope.comboStream = getValidComboStream potentialCombo, scope.comboGroups\n          scope.decodeKey = getAllMatches scope.comboGroups, scope.comboStream, existingSolved\n          scope.lastInput = char\n          scope\n\n      nextState: (trigger, scope) ->\n        # give up?\n        if eventData.keyCode is 191 # \"?\"\n          return states.gaveUp\n\n        # won?\n        totalUnsolved = R.length R.filter(R.not(R.eq(decodeKeyStates.SOLVED))) scope.decodeKey\n        if totalUnsolved is 0\n          return states.solved\n\n        # keep playing\n        return states.updateProgress\n\n      render: (scope) ->\n        render {\n          secretMessage: decode(scope.secretMessage, scope.decodeKey)\n          feedback: (comboToString(scope.comboStream) or scope.lastInput)\n          score: scope.score\n          showGameActions: true\n        }\n\n    gaveUp:\n      process: (eventData, scope) ->\n        # reset everything\n        scope.secretMessage = undefined\n        scope.comboGroups = undefined\n        scope.decodeKey = undefined\n        scope.comboStream = undefined\n        scope.score = undefined\n        scope.moves = undefined\n\n      nextState: (trigger, scope) ->\n        states.loading\n\n      render: (scope) ->\n        render {\n          secretMessage: secretMessage\n          feedback: \"You gave up!<br>Press any key to play again.\"\n          score: 0\n          showGameActions: false\n        }\n\n    solved:\n      process: (eventData, scope) ->\n        # reset everything\n        scope.secretMessage = undefined\n        scope.comboGroups = undefined\n        scope.decodeKey = undefined\n        scope.comboStream = undefined\n        scope.score = undefined\n        scope.moves = undefined\n\n      nextState: (trigger, scope) ->\n        states.loading\n\n      render: (scope) ->\n        render {\n          secretMessage: decode(scope.secretMessage, scope.decodeKey)\n          feedback:  \"SOLVED in #{scope.moves} moves!<br>Press any key to play again.\"\n          score: scope.score\n          showGameActions: false\n        }\n\n\n  fetchQuote = ->\n    Zepto.get quoteApiUrl, (response) ->\n      parse = (str = \"\") ->\n        str = str.trim()\n        str = str.replace(/\\t/g, \"\")\n        str\n\n      quote = JSON.parse(response.query.results.body).quote\n\n      message = quote.split(/[\\n\\r]?\\s\\s--/)[0]\n      source = quote.split(/[\\n\\r]?\\s\\s--/)[1]\n\n      updateFrame \"quoteLoaded\", message\n\n\n  # kick off\n  Zepto ($) ->\n    $secretMessage = $(\"#secret-message\")\n    $feedback = $(\"#feedback\")\n    $score = $(\"#score\")\n    render = (data) ->\n      {secretMessage, feedback, score, showGameActions} = data\n\n      $secretMessage.text secretMessage\n      $feedback.html feedback\n      $score.text score\n\n      if showGameActions\n        $(\"#give-up\").show()\n      else\n        $(\"#give-up\").hide()\n\n    onKeyDown = (e) ->\n      e.preventDefault()\n      updateFrame \"keyPressed\", e.keyCode\n\n    $(document).on \"keydown\", onKeyDown\n    updateFrame \"startGame\", null\n"]}