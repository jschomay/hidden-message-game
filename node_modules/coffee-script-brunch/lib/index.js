// Generated by CoffeeScript 1.6.3
var CoffeeScriptCompiler, coffeescript, isLiterate, normalizeChecker;

coffeescript = require('coffee-script');

isLiterate = function(path) {
  return /\.(litcoffee|coffee\.md)$/.test(path);
};

normalizeChecker = function(item) {
  switch (toString.call(item)) {
    case '[object RegExp]':
      return function(string) {
        return item.test(string);
      };
    case '[object Function]':
      return item;
    default:
      return function() {
        return false;
      };
  }
};

module.exports = CoffeeScriptCompiler = (function() {
  CoffeeScriptCompiler.prototype.brunchPlugin = true;

  CoffeeScriptCompiler.prototype.type = 'javascript';

  CoffeeScriptCompiler.prototype.extension = 'coffee';

  CoffeeScriptCompiler.prototype.pattern = /\.(coffee|coffee\.md|litcoffee)$/;

  function CoffeeScriptCompiler(config) {
    var _ref, _ref1;
    this.config = config;
    this.isVendor = normalizeChecker((_ref = this.config) != null ? (_ref1 = _ref.conventions) != null ? _ref1.vendor : void 0 : void 0);
  }

  CoffeeScriptCompiler.prototype.compile = function(data, path, callback) {
    var bare, compiled, err, error, options, result, _ref, _ref1, _ref2, _ref3;
    bare = (_ref = this.config) != null ? (_ref1 = _ref.plugins) != null ? (_ref2 = _ref1.coffeescript) != null ? _ref2.bare : void 0 : void 0 : void 0;
    if (bare == null) {
      bare = !this.isVendor(path);
    }
    options = {
      bare: bare,
      sourceMap: Boolean((_ref3 = this.config) != null ? _ref3.sourceMaps : void 0),
      sourceFiles: [path],
      literate: isLiterate(path)
    };
    try {
      return compiled = coffeescript.compile(data, options);
    } catch (_error) {
      err = _error;
      return error = err.location != null ? "" + err.location.first_line + ":" + err.location.first_column + " " + (err.toString()) : err.toString();
    } finally {
      if (error != null) {
        return callback(error);
      }
      result = compiled && options.sourceMap ? {
        data: compiled.js,
        map: compiled.v3SourceMap
      } : {
        data: compiled
      };
      callback(error, result);
    }
  };

  return CoffeeScriptCompiler;

})();
